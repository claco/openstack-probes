#!/usr/bin/env perl
#openstack cloud-monitoring plugin to monitor openstack
#Copyright (C) 2014  Jake Briggs jake.briggs@rackspace.com
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#

my $os_username="admin";
my $os_password="3FR37Vpo2ykUv9fVhPXS7BnZ";
my $os_tenant="admin";
my $os_auth_url="http://192.168.6.2:5000/v2.0";
my $network_type="neutron";
my $admin_token;
my $bind_host;
my $public_port;
my $admin_port;
my $keystone_token;
my $keystone_tenant;
my $keystone_user;
my $mariaUser;
my $mariaPass;
my $volume_name="cinder-volumes";
my $host = `hostname`;
my @metrics = ();

chomp($host);


use strict;
use IO::Socket::INET;
use Getopt::Std;
use Data::Dumper;
use feature "switch";
use Socket;
use lib '/usr/lib/rackspace-monitoring-agent/plugins/lib';
use IniFiles;
use Time::HiRes

my $version = '0.28';

sub checkOvs {
    if (-e '/usr/bin/ovsdb-client'){
        my @data = `/usr/bin/time -f "%e" ovsdb-client list-dbs 2>&1`;
        if ( $? != 0 || !@data ){ push(@metrics,'metric OvsDB double -1\n'); } else { push(@metrics,'metric OvsDB double '.$data[-1]); }
        @data = `/usr/bin/time -f "%e" ovs-vsctl list-br 2>&1`;
        if ( $? != 0 || !@data ){ push(@metrics,'metric OvsSwitchd double -1\n'); } else { push(@metrics,'metric OvsSwitchd double '.$data[-1]); }
    }
}

sub checkHorizon {
    if (-e '/etc/openstack-dashboard'){
        my $address = inet_ntoa( scalar gethostbyname( $host || 'localhost' ));
        my @data = `/usr/bin/time -f "%e" curl -f -s http://$address:6080/vnc_auto.html 2>&1`;
        if ( $? != 0 || !@data ){ push(@metrics,"metric NoVncProxy double -1\n"); } else { push(@metrics,"metric NoVncProxy double $data[-1]"); }
        @data = `/usr/bin/time -f "%e" curl -f -s -k https://$address 2>&1`;
        if ( $? != 0 || !@data ){ push(@metrics, "metric Horizon double -1\n"); } else { push(@metrics, "metric Horizon double $data[-1]"); }
        }
}

sub checkMemcached {
    if ( -e '/etc/init.d/memcached' || -e '/lib/systemd/system/memcached.service'  ) {
        my $host1= "127.0.0.1:11211";
        my $start_time = [Time::HiRes::gettimeofday()];
        my $sock = IO::Socket::INET->new(PeerAddr => $host.":11211", Proto => 'tcp');
        my $sock1 = IO::Socket::INET->new(PeerAddr => $host1, Proto => 'tcp');
        my $diff = Time::HiRes::tv_interval($start_time);
        if ( $sock || $sock1 ) { 
            push(@metrics, "metric MemCached double $diff\n"); 
            if ( $sock ) { $sock->close(); } else { $sock1->close(); }
        } else { push(@metrics, "metric MemCached double -1\n"); }
    }
}

sub checkMetadata {
    my @data;
    if (-e '/var/lib/neutron/dhcp'){ @data = `ls /var/lib/neutron/dhcp`; }
    if (-e '/var/lib/quantum/dhcp'){ @data = `ls /var/lib/quantum/dhcp`; }
    chomp(@data);
    my @lsuuids;
    foreach my $str (@data) { if ( $str =~ /(^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$)/ ) { push(@lsuuids, lc($1)); } }
    my @data;
    if ( -e '/usr/bin/neutron') {
        @data = `/usr//bin/neutron --os-username $os_username --os-tenant-name $os_tenant --os-auth-url $os_auth_url --os-password $os_password net-list 2>/dev/null`;
    } else {
        @data = `/usr/bin/quantum --os-username $os_username --os-tenant-name $os_tenant --os-auth-url $os_auth_url --os-password $os_password net-list 2>/dev/null`;
    }
    chomp(@data);
    my @netUuids;
    for my $str (@data) {
        my @tokens = split(' ', $str);
        if (scalar(@tokens) > 1) { if (@tokens[1] =~ /(^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$)/ ) { push(@netUuids, lc($1)); } }
    }
    my @logicalAnd;
    foreach my $dhcpuuid (@lsuuids) {
        foreach my $netuuid (@netUuids) {
            if ($dhcpuuid eq $netuuid) {
                push(@logicalAnd, $dhcpuuid);
                last;
            }
        }
    }
    my @dnsmasq = `/usr/bin/killall -s 1 dnsmasq 2>/dev/null`;
    my $thatsBad = 0;
    foreach my $value (@logicalAnd) {
        $value =~ s/^\s*(.*?)\s*$/$1/;
        my @response = `/usr/bin/time -f "%e" ip netns exec qdhcp-$value curl -f -s 169.254.169.254 2>&1`;
        if ( $? ne "5632" ) { 
            push(@metrics, "metric metadata:$value double -1\n");
            $thatsBad = 1;
        } else { push(@metrics, "metric metadata:$value double $response[-1]"); } 
    }
    if ($thatsBad == 1){
        my @try = `pkill dnsmasq`;
        if ( $? != 0 ){
            return;
        }
        if ( -e '/etc/init.d/quantum-dhcp-agent' ){ @try = `/etc/init.d/quantum-dhcp-agent restart`; }
        if ( -e '/etc/init.d/neutron-dhcp-agent' ){ @try = `/etc/init.d/neutron-dhcp-agent restart`; }
        if ( -e '/lib/systemd/system/neutron-dhcp-agent.service' ){ @try = `systemctl restart neutron-dhcp-agent`; }
        if ( $? != 0 ){
            return
        }
    }
}

sub checkMaria {
    my @data;
    if ( -e '/etc/init.d/mysql' ) {
        @data = `/usr/bin/time -f "%e" /usr/bin/mysql -h $host -e "show slave status\\G" 2>&1`;
        if ($? != 0 || !@data) { push(@metrics, "metric Mysql double -1\n"); return; } else { push(@metrics, "metric Mysql double $data[-1]"); }
        my $queues_list = {};
        foreach my $line (@data) {
            my @values = split (':',$line);
            $values[0] =~ s/^\s*(.*?)\s*$/$1/;
            $values[1] =~ s/^\s*(.*?)\s*$/$1/;
            my ($key, $value) = @values;
            next if (!defined($key) || !defined($value));
            $queues_list->{$key} = $value;
        }
        while ( my ($key, $value) = each(%$queues_list) ) {
            if ($key eq "Slave_IO_Running"){
                push(@metrics, "metric $key string $value\n"); 
            }
            if ($key eq "Slave_SQL_Running"){
                push(@metrics, "metric $key string $value\n"); 
            }
            if ($key eq "Seconds_Behind_Master"){
                push(@metrics, "metric $key string $value\n"); 
            }
        }
    } 
}

sub checkRabbit {
    my @data;
    if ( -e '/etc/init.d/rabbitmq-server' ) {
        @data = `/usr/bin/time -f "%e" /usr/sbin/rabbitmqctl list_queues 2>&1`;
        if ($? != 0 || !@data) { push(@metrics, "metric Rabbit double -1\n"); return; }
        my $queues_list = {};
        push(@metrics, "metric Rabbit double $data[-1]");
        foreach my $line (@data) {
            my ($key, $value) = $line =~ /(?:^|\s+)(\S+)\s*\t\s*("[^"]*"|\S*)/;
            next if (!defined($key) || !defined($value));
            $queues_list->{$key} = $value;
        }
        while ( my ($key, $value) = each(%$queues_list) ) {
            if ($value > 0){
                push(@metrics, "metric RabbitQ:$key int32 $value"); 
            }
        }
    } 
}

sub checkNova {
    my @data;
    if ( -e '/usr/bin/nova-manage' ) {
        @data = `/usr/bin/time -f "%e" /usr/bin/nova-manage service list 2>&1`;
        if ($? != 0 || !@data) { push(@metrics, "metric Nova double -1\n"); return; } else { push(@metrics, "metric Nova double $data[-1]"); }
        my $service_list = {};
        shift @data;
        foreach my $line (@data) {
            my @values = split(' ',$line);
            if ((@values[1] eq $host) and (@values[3] eq 'enabled')){
                $service_list->{$values[0]} = $values[4];
            }
        }
        while ( my ($key, $value) = each(%$service_list) ) { if ( $value eq 'XXX' ) { push(@metrics, "metric $key string Down\n"); } }
    }
}

sub checkKeystone {
    my @data;
    if (-e '/etc/keystone/keystone.conf' and -e '/etc/init.d/keystone-all' ){
        @data = `/usr/bin/time -f "%e" /usr/bin/keystone --os-username $os_username --os-tenant-name $os_tenant --os-auth-url http://$host:5000/v2.0 --os-password $os_password token-get 2>&1`;
        if ($? != 0 || !@data) { push(@metrics, "metric Keystone double -1\n"); 
        } else { push(@metrics, "metric Keystone double $data[-1]");
            my @token = split(' ',@data[4]);
            $keystone_token = @token[3];
            my @token = split(' ',@data[5]);
            $keystone_tenant = @token[3];
            my @token = split(' ',@data[6]);
            $keystone_user = @token[3];
        } 
    } else {
        @data = `/usr/bin/keystone --os-username $os_username --os-tenant-name $os_tenant --os-auth-url $os_auth_url --os-password $os_password token-get 2>&1`;
        if ($? != 0 || !@data) { 
            return; 
        } else { 
            my @token = split(' ',@data[4]);
            $keystone_token = @token[3];
            my @token = split(' ',@data[5]);
            $keystone_tenant = @token[3];
            my @token = split(' ',@data[6]);
            $keystone_user = @token[3];
        } 
    }
}

sub checkSwiftProxy {
    my $address = inet_ntoa( scalar gethostbyname( $host || 'localhost' ));
    my @data = `/usr/bin/time -f "%e" curl -f -s http://$address:8080/healthcheck 2>&1`;
    if ( $? != 0 || !@data ){ push(@metrics, "metric SwiftProxy double -1\n"); } else { push(@metrics, "SwiftProxy double $data[-1]"); }
}

sub checkSwiftAccount {
    my $address = inet_ntoa( scalar gethostbyname( $host || 'localhost' ));
    my @data = `/usr/bin/time -f "%e" curl -f -s http://$address:6002/healthcheck 2>&1`;
    if ( $? != 0 || !@data ){ push(@metrics, "metric SwiftAccount double -1\n"); } else { push(@metrics, "SwiftAccount double $data[-1]"); }
}

sub checkSwiftContainer {
    my $address = inet_ntoa( scalar gethostbyname( $host || 'localhost' ));
    my @data = `/usr/bin/time -f "%e" curl -f -s http://$address:6001/healthcheck 2>&1`;
    if ( $? != 0 || !@data ){ push(@metrics, "metric SwiftContainer double -1\n"); } else { push(@metrics, "SwiftContainer double $data[-1]"); }
}

sub checkSwiftObject {
    my $address = inet_ntoa( scalar gethostbyname( $host || 'localhost' ));
    my @data = `/usr/bin/time -f "%e" curl -f -s http://$address:6000/healthcheck 2>&1`;
    if ( $? != 0 || !@data ){ push(@metrics, "metric SwiftObject double -1\n"); } else { push(@metrics, "SwiftObject double $data[-1]"); }
}

sub checkSwift {
    if ( -e '/etc/rc3.d/S98openstack-swift-proxy' || -e '/etc/init/swift-proxy.conf' ) { 
        my $out = `echo " ------- SWIFT-PROXY   START ------------ " >> /var/log/monitoring.log`;
        checkSwiftProxy();
        my $out = `echo " ------- SWIFT-PROXY   STOP ------------ " >> /var/log/monitoring.log`;
    }
    if ( -e '/etc/rc3.d/S98openstack-swift-account' || -e '/etc/init/swift-account.conf' ) {
        my $out = `echo " ------- SWIFT-ACCOUNT   START ------------ " >> /var/log/monitoring.log`;
        checkSwiftAccount();
        my $out = `echo " ------- SWIFT-ACCOUNT   STOP ------------ " >> /var/log/monitoring.log`;
    }
    if ( -e '/etc/rc3.d/S98openstack-swift-container' || -e '/etc/init/swift-container.conf' ) {
        my $out = `echo " ------- SWIFT-CONTAINER   START ------------ " >> /var/log/monitoring.log`;
        checkSwiftContainer();
        my $out = `echo " ------- SWIFT-CONTAINER   STOP ------------ " >> /var/log/monitoring.log`;
    }
    if ( -e '/etc/rc3.d/S98openstack-swift-object' || -e '/etc/init/swift-object.conf' ) {
        my $out = `echo " ------- SWIFT-OBJECT   START ------------ " >> /var/log/monitoring.log`;
        checkSwiftObject();
        my $out = `echo " ------- SWIFT-OBJECT   STOP ------------ " >> /var/log/monitoring.log`;
    }
}

sub checkGlance_api {
    my @data;
    if (-e '/etc/glance/glance-api.conf' and -e '/etc/init.d/glance-api' ){
        @data = `/usr/bin/time -f "%e" curl --output /dev/null -sH "X-Auth-Token: $keystone_token" http://169.254.123.1:9292/v1/images/detail?limit=10 2>&1`;
        if ( $? != 0 || !@data ){ push(@metrics, "metric Glance-Api double -1\n"); } else { push(@metrics, "metric Glance-Api double $data[-1]"); }
    }
}

sub checkGlance_registry {
    my @data;
    if (-e '/etc/glance/glance-registry.conf' and -e '/etc/init.d/glance-registry' ){
        @data = `/usr/bin/time -f "%e" curl --output /dev/null -sH "X-Auth-Token: $keystone_token" http://169.254.123.1:9191/images 2>&1`;
        if ( $? != 0 || !@data ){ push(@metrics, "metric Glance-Registry double -1\n"); } else { push(@metrics, "metric Glance-Registry double $data[-1]"); }
    }
}

sub checkNeutronServer {
    my @data;
    if ( -e '/etc/init.d/neutron-server' || -e '/etc/init.d/quantum-server' ) {
        if ( -e '/etc/neutron/neutron.conf' || -e '/etc/quantum/quantum.conf') {
            @data = `/usr/bin/time -f "\n%e" curl -s -f -H "X-Auth-Token:$keystone_token" http://$host:9696/v2.0/networks 2>&1`;
            if ( $? ne "0" || !@data ){ push(@metrics, "metric NeutronServer double -1\n"); } else { push(@metrics, "metric NeutronServer double $data[-1]"); }
        }
    }
}

sub checkNeutron {
    my @data;
    if ( -e '/etc/neutron' || -e '/etc/quantum' ) {
        checkOvs();
        if ( -e '/usr/bin/neutron' ) {
            @data = `/usr/bin/time -f "%e" /usr/bin/neutron --os-username $os_username --os-tenant-name $os_tenant --os-auth-url $os_auth_url --os-password $os_password agent-list 2>&1`;
        } else {
            @data = `/usr/bin/time -f "%e" /usr/bin/quantum --os-username $os_username --os-tenant-name $os_tenant --os-auth-url $os_auth_url --os-password $os_password agent-list 2>&1`;
        }
        if ($? != 0 || !@data) {
            push(@metrics, "metric Neutron double -1\n");
        } else {
            push(@metrics, "metric Neutron double $data[-1]");
            my @service_list;
            shift @data;
            shift @data;
            shift @data;
            pop @data;
            foreach my $line (@data) {
                my $service = {};
                my @values = split('\|',$line);
                if (@values[3] =~ /$host/) {
                    $service->{@values[2]} = @values[4];
                    push @service_list,$service;
                }
            }
            for my $i (@service_list) {
                while ( my ($key, $value) = each %{$i} ) {
                    if ( $key =~ m/DHCP/){ checkMetadata() };
                    if ( $value eq 'XXX' || $value eq 'xxx' ) { push(@metrics, "metric $key string Down"); }
                }
            }
        }
    }
}

sub checkCinder {
    my @data;
    my $localApi;
    if ( -e '/etc/init.d/cinder-api' || -e '/etc/init.d/openstack-cinder-api' || -e '/lib/systemd/system/openstack-cinder-api.service' ){
        $localApi = 1;
        @data = `/usr/bin/time -f "%e" curl -f -s -i http://$host:8776/v1/$keystone_tenant/os-services -X GET -H "X-Auth-Project-Id: admin" -H "User-Agent: nimbus" -H "Accept: application/xml" -H "X-Auth-Token: $keystone_token" 2>&1`;
    } else {
        if ( -e '/etc/init.d/cinder-volume' || -e '/etc/init.d/openstack-cinder-volume' || -e '/lib/systemd/system/openstack-cinder-volume.service' ){
            $localApi = 0;
            my @vip = split('5000',$os_auth_url);
            @data = `/usr/bin/time -f "%e" curl -f -s -i $vip[0]:8776/v1/$keystone_tenant/os-services -X GET -H "X-Auth-Project-Id: admin" -H "User-Agent: nimbus" -H "Accept: application/xml" -H "X-Auth-Token: $keystone_token" 2>&1`;
        } else { return }
    }
    if ($? != 0 || !@data) {
        if ( $localApi == 1 ){
            if ($? ne "5632"){ push(@metrics, "metric Cinder double -1\n"); } else { push(@metrics, "metric Cinder double $data[-1]"); }
        }
    } else {
        my $last = pop @data;
        my @values = split('>',$last);
        shift @values;
        pop @values;
        foreach (@values){
            my @line = split(' ',$_);
            chop($line[5]);
            if ($line[5] =~ $host){
                if ($line[1] =~ "enabled" && $line[4] =~ "down"){ push(@metrics, "metric $line[2] string Down"); }
            }
        }
    }
    my @vgcheck = `/sbin/vgdisplay $volume_name 2>/dev/null`;
    if ($? == 0 ) {
        my $vgSize = substr(`vgs -o size --noheadings --units b $volume_name 2>/dev/null`,0,-2);
        my $vgFree = substr(`vgs -o free --noheadings --units b $volume_name 2>/dev/null`,0,-2);
        my $vgUsed = $vgSize - $vgFree;
        push(@metrics, "metric CinderVGSize int64 $vgSize\n");
        push(@metrics, "metric CinderVGUsed int64 $vgUsed\n");
    }
}

sub checkKvm {
    my @data;
    if (-e '/usr/bin/virsh' ){
        @data = `/usr/bin/time -f "%e" /usr/bin/virsh sysinfo 2>&1`;
        if ($? != 0 || !@data) { push(@metrics, "metric Kvm double -1\n"); } else { push(@metrics, "metric Kvm double $data[-1]"); } 
    }
}

sub timeout {
    my $out = `echo " ------------------- " >> /var/log/monitoring.log`;
    my $out = `echo $host." -- Start" >> /var/log/monitoring.log`;
    my $out = `echo " ------------------- " >> /var/log/monitoring.log`;
    my $out = `echo " ------- KEYSTONE   START ------------ " >> /var/log/monitoring.log`;
    checkKeystone();
    my $out = `echo " ------- KEYSTONE   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- MEMCACHED   START ------------ " >> /var/log/monitoring.log`;
    checkMemcached();
    my $out = `echo " ------- MEMCACHED   STOP ------------ " >> /var/log/monitoring.log`;
    if (defined $network_type){
        if ($network_type eq 'neutron'){
    my $out = `echo " ------- NEUTRON-SERVER   START ------------ " >> /var/log/monitoring.log`;
            checkNeutronServer();
    my $out = `echo " ------- NEUTRON-SERVER   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- NEUTRON   START ------------ " >> /var/log/monitoring.log`;
            checkNeutron();
    my $out = `echo " ------- NEUTRON   STOP ------------ " >> /var/log/monitoring.log`;
        }
    }
    my $out = `echo " ------- RABBIT   START ------------ " >> /var/log/monitoring.log`;
    checkRabbit();
    my $out = `echo " ------- RABBIT   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- NOVA   START ------------ " >> /var/log/monitoring.log`;
    checkNova();
    my $out = `echo " ------- NOVA   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- CINDER   START ------------ " >> /var/log/monitoring.log`;
    checkCinder();
    my $out = `echo " ------- CINDER   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- GLANCE-API   START ------------ " >> /var/log/monitoring.log`;
    checkGlance_api();
    my $out = `echo " ------- GLANCE-API   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- GLANCE-REGISTRY   START ------------ " >> /var/log/monitoring.log`;
    checkGlance_registry();
    my $out = `echo " ------- GLANCE-REGISTRY   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- KVM   START ------------ " >> /var/log/monitoring.log`;
    checkKvm();
    my $out = `echo " ------- KVM   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo " ------- HORIZON   START ------------ " >> /var/log/monitoring.log`;
    checkHorizon();
    my $out = `echo " ------- HORIZON   STOP ------------ " >> /var/log/monitoring.log`;
    checkSwift();
    my $out = `echo " ------- MARIA   START ------------ " >> /var/log/monitoring.log`;
    checkMaria();
    my $out = `echo " ------- MARIA   STOP ------------ " >> /var/log/monitoring.log`;
    my $out = `echo $host." -- Stop" >> /var/log/monitoring.log`;
}

sub readConfig {
    my $novaCfg;
    my $mariaCfg;
    my $keystoneCfg;
    if (-e '/etc/nova/nova.conf' ) { $novaCfg = IniFiles->new ( -file => "/etc/nova/nova.conf" ) }
    if (-e '/etc/nova/nova.conf' ) { $novaCfg = IniFiles->new ( -file => "/etc/nova/nova.conf" ) }
    if (-e '/root/.my.cnf' ) { $mariaCfg = IniFiles->new ( -file => "/root/.my.cnf" ) }
    if (-e '/etc/keystone/keystone.conf') { $keystoneCfg = IniFiles->new ( -file => "/etc/keystone/keystone.conf" ) }
    if ( -e '/root/openrc' ) {
        open ('openrc','/root/openrc');
        while (<openrc>) {
            chomp;
            if (substr($_,0,1) !~ "#"){
                my ($key, $val) = split /=/;
                if ($key =~ "OS_USERNAME") { $os_username = $val; }
                if ($key =~ "OS_PASSWORD") { $os_password = $val; }
                if ($key =~ "OS_TENANT_NAME") { $os_tenant = $val; }
                if ($key =~ "OS_AUTH_URL") { $os_auth_url = $val; }
            }
        }
    }
    if (defined $novaCfg){
        if (!defined $novaCfg->val('DEFAULT', 'network_manager')){
            $network_type = 'neutron'; 
        } else {
            $network_type = 'nova-network'; 
        }
    }
    if (defined $keystoneCfg){
        $admin_token = $keystoneCfg->val('DEFAULT', 'admin_token');
        $bind_host = $keystoneCfg->val('DEFAULT', 'bind_host');
        $public_port = $keystoneCfg->val('DEFAULT', 'public_port');
        $admin_port = $keystoneCfg->val('DEFAULT', 'admin_port');
    }
    if (defined $mariaCfg){
        $mariaUser = $mariaCfg->val('client', 'user');
        $mariaPass = $mariaCfg->val('client', 'password');
    }
}

readConfig();
timeout();
print "status Okay\n";
foreach (@metrics) { print $_;}
exit(0);
