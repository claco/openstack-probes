#!/usr/bin/env python
# Copyright 2012 Rackspace
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys
import urllib2

try:
    import json
except ImportError:
    import simplejson as json


class RestHTTPErrorProcessor(urllib2.BaseHandler):
    def http_error_201(self, request, response, code, message, headers):
        return response

    def http_error_204(self, request, response, code, message, headers):
        return response


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("account", action="store", help="Core Account Number")
    parser.add_argument("device", action="store", help="Core Device Number")
    parser.add_argument("token", action="store",
                        help="Token Normally generated from cloud-token")
    parser.add_argument(
        "-f", "--fstype", action="store", dest="fs",
        help="Filesystem type for filesystem checks. Default ext4",
        default="ext4")
    parser.add_argument(
        "-a", "--agent", action="store_false", dest="agent",
        default=True,
        help="Create agent config file. Default true")
    parser.add_argument(
        "-l", "--list", action="store_true", dest="lst",
        help="List defined checks.")
    parser.add_argument(
        "-p", "--poll_period", action="store", dest="period",
        default=300, help="Polling interval in seconds")
    parser.add_argument(
        "-t", "--timeout", action="store", dest="timeout",
        default=60, help="Timeout in seconds")

    options = parser.parse_args()

    try:
        cloudM = CloudMonitoring(options.account, options.token)
        entities = cloudM.get_entities()
    except Exception as err:
        print ("Request Failed: "+str(err))
        raise

    for i in entities['values']:
        if i['uri'].find(options.device) > 0:
            options.entity = i['id']

    return options


def request(url, auth_token=None, data=None):
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    if auth_token:
        headers['X-Auth-Token'] = auth_token
    if data:
        data = json.dumps(data)
    req = urllib2.Request(url, data, headers)
    res = urllib2.build_opener(RestHTTPErrorProcessor).open(req)
    if res.code == 200:
        return json.loads(res.read())
    elif res.code == 201 or res.code == 204:
        return res.headers['Location'].rsplit("/")[-1]


def put_request(url, auth_token=None, data=None):
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    if auth_token:
        headers['X-Auth-Token'] = auth_token
    if data:
        data = json.dumps(data)

    req = urllib2.Request(url, data, headers)
    req.get_method = lambda: 'PUT'
    res = urllib2.build_opener(RestHTTPErrorProcessor).open(req)

    if res.code == 200:
        return json.loads(res.read())
    elif res.code == 201 or res.code == 204:
        return res.headers['Location'].rsplit("/")[-1]


def link_agent_to_entity(cm, entity, account, device):
    agent_id = None
    try:
        # Get existing agent id if it exists
        agent_id = cm.get_agent_id(entity)
    except Exception as err:
        print ("Exception suppressed: Couldn't retrieve agent id, \
            creating new one. " + str(err))

    if not agent_id:
        agent_id = account+"-"+device
        try:
            # Associate the agent id with the entity.
            cm.set_agent_id(entity, {"agent_id": agent_id})
        except Exception as err:
            print ("Couldn't create new agent id." + str(err))
            raise

    return agent_id


def dlfile():
    gitUrl = ("https://github.com/rcbops/openstack-probes/"
              "raw/master/maas/openstack-deploy")
    f = urllib2.urlopen(gitUrl)
    with open(
            "/usr/lib/rackspace-monitoring-agent/plugins/openstack-deploy",
            "wb") as local_file:
        local_file.write(f.read())


def get_agent_token(cm, agent_id):
    try:
        # Get agent token if it exists.
        agent_token = cm.get_my_token(agent_id)
    except Exception as err:
        agent_token = None
        print ("Exception suppressed: Couldn't retrieve agent token,\
                creating new one. " + str(err))

    if not agent_token:
        try:
            # Create the agent token.
            agent_token = cm.create_token({"label": agent_id})
        except Exception as err:
            print ("Request Failed: Couldn't create agent id." + str(err))
            raise

    return agent_token


def create_plugin_check():
    check_type = "agent.plugin"
    try:
        plugin_check_id = cm.create_check(args.entity, {
            "label": "OpenStack",
            "type": check_type,
            "timeout": args.timeout,
            "period": args.period,
            "details": {"file": "openstack-monitoring"},
            "metadata": {"event-type-override": "Openstack/Monitoring"}
        })
        installDir = '/usr/lib/rackspace-monitoring-agent/plugins'
        if not os.path.isdir(installDir):
            os.makedirs(installDir)
        dlfile()
        param = ("/usr/lib/rackspace-monitoring-agent/plugins/"
                 "openstack-deploy")
        workingDir = "/usr/lib/rackspace-monitoring-agent/plugins"
        p = subprocess.Popen(["/bin/bash", param], cwd=workingDir)
        p.wait()

        print ("OpenStack plugin check created")
    except Exception as err:
        print ("Request Failed: Couldn't create OpenStack check " + str(err))
        raise
    sync = (":set consistencyLevel=ALL\n"
            ":set consecutiveCount=3\n"
            "if (metric['Seconds_Behind_Master'] != 'NULL') {\n"
            "    return new AlarmStatus(OK, 'Mysql replication "
            "is working correctly');\n"
            "}\n"
            "return new AlarmStatus(CRITICAL, 'Mysql sync has stopped "
            "');\n")
    slavesql = (":set consistencyLevel=ALL\n"
                ":set consecutiveCount=3\n"
                "if (metric['Slave_SQL_Running'] == 'Yes') {\n"
                "    return new AlarmStatus(OK, 'Mysql replication "
                "is working correctly');\n"
                "}\n"
                "return new AlarmStatus(CRITICAL, 'Mysql Slave_SQL "
                "has stopped');\n")
    slaveio = (":set consistencyLevel=ALL\n"
               ":set consecutiveCount=3\n"
               "if (metric['Slave_IO_Running'] == 'Yes') {\n"
               "    return new AlarmStatus(OK, 'Mysql replication "
               "is working correctly');\n"
               "}\n"
               "return new AlarmStatus(CRITICAL, 'Mysql Slave_IO "
               "has stopped');\n")
    mysql = (":set consistencyLevel=ALL\n"
             ":set consecutiveCount=3\n"
             "if (metric['Mysql'] != -1) {\n"
             "    return new AlarmStatus(OK, 'Mysql is "
             "responding correctly');\n"
             "}\n"
             "return new AlarmStatus(CRITICAL, 'Mysql is not "
             "responding correctly');\n")
    nova = (":set consistencyLevel=ALL\n"
            ":set consecutiveCount=3\n"
            "if (metric['Nova'] == -1) {\n"
            "    return new AlarmStatus(CRITICAL, 'The Nova API is not "
            "responding correctly');\n"
            "}\n"
            "if (metric['nova-scheduler'] == 'Down' {\n"
            "    return new AlarmStatus(CRITICAL, 'Nova Scheduler is not "
            "responding correctly');\n"
            "}\n"
            "if (metric['nova-conductor'] == 'Down' {\n"
            "    return new AlarmStatus(CRITICAL, 'Nova Conductor is not "
            "responding correctly');\n"
            "}\n"
            "if (metric['nova-cert'] == 'Down' {\n"
            "    return new AlarmStatus(CRITICAL, 'Nova Cert is not "
            "responding correctly');\n"
            "}\n"
            "if (metric['nova-consoleauth'] == 'Down' {\n"
            "    return new AlarmStatus(CRITICAL, 'Nova Consoleauth is not "
            "responding correctly');\n"
            "}\n"
            "if (metric['nova-compute'] == 'Down' {\n"
            "    return new AlarmStatus(CRITICAL, 'Nova Compute is not "
            "responding correctly');\n"
            "}\n"
            "return new AlarmStatus(OK, 'All Nova services are "
            "responding correctly');\n")



    neutron = (":set consistencyLevel=ALL\n"
               ":set consecutiveCount=3\n"
               "if (metric['Neutron'] == -1) {\n"
               "    return new AlarmStatus(CRITICAL, 'The neutron API is not "
               "responding correctly');\n"
               "}\n"
               "if (metric['Neutron'] == -1) {\n"
               "    return new AlarmStatus(CRITICAL, 'The neutron API is not "
               "responding correctly');\n"
               "}\n"
               "return new AlarmStatus(OK, 'Neutron API is "
               "responding correctly');\n")




    rabbit = (":set consistencyLevel=ALL\n"
              ":set consecutiveCount=3\n"
              "if (metric['Rabbit'] != -1) {\n"
              "    return new AlarmStatus(OK, 'RabbitMQ is "
              "responding correctly');\n"
              "}\n"
              "return new AlarmStatus(CRITICAL, 'RabbitMQ is not "
              "responding correctly');\n")
    memcached = (":set consistencyLevel=ALL\n"
                 ":set consecutiveCount=3\n"
                 "if (metric['MemCached'] != -1) {\n"
                 "    return new AlarmStatus(OK, 'MemCached is "
                 "responding correctly');\n"
                 "}\n"
                 "return new AlarmStatus(CRITICAL, 'MemCached is not "
                 "responding correctly');\n")
    glanceregistry = (":set consistencyLevel=ALL\n"
                      ":set consecutiveCount=3\n"
                      "if (metric['Glance-Registry'] != -1) {\n"
                      "    return new AlarmStatus(OK, 'Glance-Registry is "
                      "responding correctly');\n"
                      "}\n"
                      "return new AlarmStatus(CRITICAL, 'Glance-Registry is "
                      "not responding correctly');\n")
    glanceapi = (":set consistencyLevel=ALL\n"
                 ":set consecutiveCount=3\n"
                 "if (metric['Glance-Api'] != -1) {\n"
                 "    return new AlarmStatus(OK, 'Glance-Api is "
                 "responding correctly');\n"
                 "}\n"
                 "return new AlarmStatus(CRITICAL, 'Glance-Api is not "
                 "responding correctly');\n")
    neutronserver = (":set consistencyLevel=ALL\n"
                     ":set consecutiveCount=3\n"
                     "if (metric['NeutronServer'] != -1) {\n"
                     "    return new AlarmStatus(OK, 'NeutronServer is "
                     "responding correctly');\n"
                     "}\n"
                     "return new AlarmStatus(CRITICAL, 'NeutronServer is not "
                     "responding correctly');\n")
    horizon = (":set consistencyLevel=ALL\n"
               ":set consecutiveCount=3\n"
               "if (metric['Horizon'] != -1) {\n"
               "    return new AlarmStatus(OK, 'Horizon is "
               "responding correctly');\n"
               "}\n"
               "return new AlarmStatus(CRITICAL, 'Horizon is not "
               "responding correctly');\n")
    novncproxy = (":set consistencyLevel=ALL\n"
                  ":set consecutiveCount=3\n"
                  "if (metric['NoVncProxy'] != -1) {\n"
                  "    return new AlarmStatus(OK, 'NoVncProxy is "
                  "responding correctly');\n"
                  "}\n"
                  "return new AlarmStatus(CRITICAL, 'NoVncProxy is not "
                  "responding correctly');\n")
    kvm = (":set consistencyLevel=ALL\n"
           ":set consecutiveCount=3\n"
           "if (metric['Kvm'] != -1) {\n"
           "    return new AlarmStatus(OK, 'Kvm is "
           "responding correctly');\n"
           "}\n"
           "return new AlarmStatus(CRITICAL, 'Kvm is not "
           "responding correctly');\n")
    ovsswitchd = (":set consistencyLevel=ALL\n"
                  ":set consecutiveCount=3\n"
                  "if (metric['OvsSwitchd'] != -1) {\n"
                  "    return new AlarmStatus(OK, 'OvsSwitchd is "
                  "responding correctly');\n"
                  "}\n"
                  "return new AlarmStatus(CRITICAL, 'OvsSwitchd is not "
                  "responding correctly');\n")
    ovsdb = (":set consistencyLevel=ALL\n"
             ":set consecutiveCount=3\n"
             "if (metric['OvsDB'] != -1) {\n"
             "    return new AlarmStatus(OK, 'OvsDB is accessible');\n"
             "}\n"
             "return new AlarmStatus(CRITICAL, 'OvsDB is not accessible');\n")
    cicheck = (":set consistencyLevel=ALL\n"
               ":set consecutiveCount=3\n"
               "if (percentage(metric['CinderVGUsed'], "
               "metric['CinderVGSize']) > 98) {\n"
               "    return new AlarmStatus(CRITICAL, "
               "'Less than 2% free space left.');\n"
               "}\n"
               "if (percentage(metric['CinderVGUsed'], "
               "metric['CinderVGSize']) > 95) {\n"
               "    return new AlarmStatus(WARNING, "
               "'Less than 5% free space left.');\n"
               "}\n")
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "cindercheck",
        "criteria": cicheck
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Sync",
        "criteria": sync
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "SlaveIO",
        "criteria": slaveio
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "SlaveSql",
        "criteria": slavesql
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Mysql",
        "criteria": mysql
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "OvsDB",
        "criteria": ovsdb
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Rabbit",
        "criteria": rabbit
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Nova",
        "criteria": nova
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Neutron",
        "criteria": neutron
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Memcached",
        "criteria": memcached
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Glance-Registry",
        "criteria": glanceregistry
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Glance-Api",
        "criteria": glanceapi
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Neutron-Server",
        "criteria": neutronserver
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Horizon",
        "criteria": horizon
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "NoVncProxy",
        "criteria": novncproxy
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "Kvm",
        "criteria": kvm
    })
    cm.create_alarm(args.entity, {
        "check_id": plugin_check_id,
        "notification_plan_id": 'npManaged',
        "label": "OvsSwitchd",
        "criteria": ovsswitchd
    })

    return plugin_check_id


def create_filesystem_check(fs):
    check_type = "agent.filesystem"
    target = fs
    try:
        fs_check_id = cm.create_check(args.entity, {
            "label": "Filesystem",
            "type": check_type,
            "timeout": args.timeout,
            "period": args.period,
            "details": {
                "target": target
            }
        })
        fscheck = (":set consistencyLevel=ALL\n"
                   ":set consecutiveCount=3\n"
                   "if (percentage(metric['used'], metric['total']) > 98) {\n"
                   "    return new AlarmStatus(CRITICAL, "
                   "'Less than 2% free space left.');\n"
                   "}\n"
                   "if (percentage(metric['used'], metric['total']) > 95) {\n"
                   "    return new AlarmStatus(WARNING, "
                   "'Less than 5% free space left.');\n"
                   "}\n")
        cm.create_alarm(args.entity, {
            "check_id": fs_check_id,
            "notification_plan_id": 'npManaged',
            "label": "fscheck",
            "criteria": fscheck
        })
        print ("Filesystem check created")
    except Exception as err:
        print ("Request Failed: Couldn't create filesystem check." + str(err))
        raise
    return fs_check_id


def create_la_check():
    check_type = "agent.load_average"
    try:
        la_check_id = cm.create_check(args.entity, {
            "label": "Load Average",
            "type": check_type,
            "timeout": args.timeout,
            "period": args.period
        })
        lacheck = (":set consistencyLevel=ALL\n"
                   ":set consecutiveCount=3\n"
                   "if (metric['5m'] > 96) {\n"
                   "    return new AlarmStatus(CRITICAL, "
                   "'Load average has been > 96 for 5 minutes.');\n"
                   "}\n"
                   "return new AlarmStatus(OK, "
                   "'Load Average is under set limits.');\n")
        cm.create_alarm(args.entity, {
            "check_id": la_check_id,
            "notification_plan_id": 'npManaged',
            "label": "lacheck",
            "criteria": lacheck
        })
        print ("Load average check created")

    except Exception as err:
        print ("Request Failed: Couldn't create load check." + str(err))
        raise
    return la_check_id


def create_cpu_check():
    check_type = "agent.cpu"
    try:
        cpu_check_id = cm.create_check(args.entity, {
            "label": "CPU",
            "type": check_type,
            "timeout": args.timeout,
            "period": args.period
        })
        cpucheck = (":set consistencyLevel=ALL\n"
                    ":set consecutiveCount=3\n"
                    "if (metric['usage_average'] >= 95) {\n"
                    "    return new AlarmStatus(CRITICAL, "
                    "'Average CPU idle <= 5.');\n"
                    "}\n"
                    "return new AlarmStatus(OK, "
                    "'Average CPU idle time is now acceptable.');\n")
        cm.create_alarm(args.entity, {
            "check_id": cpu_check_id,
            "notification_plan_id": 'npManaged',
            "label": "cpucheck",
            "criteria": cpucheck
        })
        print ("CPU check created")
    except Exception as err:
        print ("Request Failed: Couldn't create CPU check" + str(err))
        raise
    return cpu_check_id


def create_memory_check():
    check_type = "agent.memory"
    try:
        mem_check_id = cm.create_check(args.entity, {
            "label": "Memory",
            "type": check_type,
            "timeout": args.timeout,
            "period": args.period
        })
        memcheck = (":set consistencyLevel=ALL\n"
                    ":set consecutiveCount=3\n"
                    "if (percentage(metric['actual_used'], \n"
                    "metric['total']) >= 98) {\n"
                    "    return new AlarmStatus(CRITICAL, "
                    "'Memory usage exceeds 98');\n"
                    "}\n"
                    "return new AlarmStatus(OK, "
                    "'Memory usage is within acceptable limits.');\n")
        cm.create_alarm(args.entity, {
            "check_id": mem_check_id,
            "notification_plan_id": 'npManaged',
            "label": "memcheck",
            "criteria": memcheck
        })
        print ("Memory check created")
    except Exception as err:
        print ("Request Failed: Couldn't create memory check." + str(err))
        raise
    return mem_check_id


class CloudMonitoring:

    def __init__(self, account_number, token):
        self.token = token
        self.base_url = ("https://monitoring.api.rackspacecloud.com"
                         "/v1.0/hybrid:%s" % account_number)
        self.headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "X-Auth-Token": self.token
        }
        self.notification_plan = 'npManaged'

    def __request(self, path, data=None):
        return request(self.base_url + path, self.token, data)

    def __putrequest(self, path, data=None):
        return put_request(self.base_url + path, self.token, data)

    def __paginated_request(self, path):
        items = []
        next_href = self.base_url + path
        while next_href:
            result = request(next_href, self.token)
            items += result["values"]
            next_href = result["metadata"]["next_href"]
        return items

    def get_alarms(self):
        return self.request("/entities/%s/alarms" % self.entity)

    def set_agent_id(self, entity_id, data):
        return self.__putrequest("/entities/%s" % entity_id, data)

    def get_agent_tokens(self):
        return self.__request("/agent_tokens")

    def create_token(self, data):
        return self.__request("/agent_tokens", data)

    def get_my_token(self, agent_id):
        my_key = ''
        d = self.get_agent_tokens()['values']
        for v in d:
            if v['label'] == agent_id:
                my_key = v['id']
        return my_key

    def create_check(self, entity_id, data):
        return self.__request("/entities/%s/checks" % entity_id, data)

    def create_alarm(self, entity_id, data):
        return self.__request("/entities/%s/alarms" % entity_id, data)

    def get_alarm_template(self, template_name):
        return self.__request("/alarm_examples/%s" % template_name)

    def get_checks(self, entity_id):
        return self.__request("/entities/%s/checks" % entity_id)

    def get_check_by_type(self, check_type, entity_id):
        for check in self.get_checks(entity_id)['values']:
            if check['type'] == check_type:
                return check

    def get_configured_check_types(self, entity_id):
        checks = []
        for check in self.get_checks(entity_id)['values']:
            if check['type'] not in checks:
                checks.append(check['type'])
        return checks

    def get_entity_details(self, entity_id):
        return self.__request("/entities/%s" % entity_id)

    def get_entities(self):
        return self.__request("/entities")

    def get_agent_id(self, entity_id):
        my_id = self.get_entity_details(entity_id)['agent_id']
        return my_id


if __name__ == "__main__":

    args = main()

    if not args.account or not args.device or not args.token:
        print ("Failed: Missing input parameters. Try --help")
        sys.exit(1)

    for x in (args.account, args.device, args.entity, args.token):
        if x[0] == '-':
            print ("Failed: Missing input parameters. Try --help")
            sys.exit(1)

    try:
        cm = CloudMonitoring(args.account, args.token)
    except Exception as err:
        print ("Request Failed: "+str(err))
        raise

    try:
        checks = cm.get_configured_check_types(args.entity)
    except Exception as err:
        print ("Request Failed: Couldn't view existing checks." + str(err))
        raise

    if args.lst:
        for check in checks:
            print (check)
        exit(0)
    create_plugin_check()
    mounts = open("/proc/mounts", "rb")
    for mount in mounts:
        line = mount.split(" ")
        if line[2] == args.fs:
            create_filesystem_check(line[1])
    create_la_check()
    create_cpu_check()
    create_memory_check()

    agent_id = link_agent_to_entity(cm, args.entity, args.account, args.device)
    agent_token = get_agent_token(cm, agent_id)

    if args.agent:
        fileInfo = ("monitoring_token " + agent_token + "\n"
                    "monitoring_id " + agent_id + "\n")
        with open("/etc/rackspace-monitoring-agent.cfg", "wb") as local_file1:
            local_file1.write(fileInfo)
        local_file1.close()
