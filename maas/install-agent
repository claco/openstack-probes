#!/usr/bin/env python
# Copyright 2012 Rackspace
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import subprocess
import sys
import urllib2

try:
    import json
except ImportError:
    import simplejson as json


class RestHTTPErrorProcessor(urllib2.BaseHandler):
    def http_error_201(self, request, response, code, message, headers):
        return response

    def http_error_204(self, request, response, code, message, headers):
        return response


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("account", action="store", help="Core Account Number")
    parser.add_argument("device", action="store", help="Core Device Number")
    parser.add_argument("token", action="store",
                        help="Token Normally generated from cloud-token")
    parser.add_argument(
        "-e", "--entity", action="store", dest="entity",
        help="Entity ID attached to core device.")
    parser.add_argument(
        "-p", "--poll_period", action="store", dest="period",
        default=300, help="Polling interval in seconds")
    parser.add_argument(
        "-t", "--timeout", action="store", dest="timeout",
        default=60, help="Timeout in seconds")

    options = parser.parse_args()

    try:
        cloudM = CloudMonitoring(options.account, options.token)
        entities = cloudM.get_entities()
    except Exception as err:
        write_rba("Status", "Request Failed: "+str(err))
        raise

    for i in entities['values']:
        if i['uri'].find(options.device) > 0:
            options.entity = i['id']

    return options


def request(url, auth_token=None, data=None):
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    if auth_token:
        headers['X-Auth-Token'] = auth_token
    if data:
        data = json.dumps(data)

    print (url)
    req = urllib2.Request(url, data, headers)
    res = urllib2.build_opener(RestHTTPErrorProcessor).open(req)
    if res.code == 200:
        return json.loads(res.read())
    elif res.code == 201 or res.code == 204:
        return res.headers['Location'].rsplit("/")[-1]


def put_request(url, auth_token=None, data=None):
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }

    if auth_token:
        headers['X-Auth-Token'] = auth_token
    if data:
        data = json.dumps(data)

    req = urllib2.Request(url, data, headers)
    req.get_method = lambda: 'PUT'
    res = urllib2.build_opener(RestHTTPErrorProcessor).open(req)

    if res.code == 200:
        return json.loads(res.read())
    elif res.code == 201 or res.code == 204:
        return res.headers['Location'].rsplit("/")[-1]


def write_rba(name, desc):
    print ("RBA START", name)
    print (desc)
    print ("RBA END", name)


def link_agent_to_entity(cm, entity, account, device):
    agent_id = None
    try:
        # Get existing agent id if it exists
        agent_id = cm.get_agent_id(entity)
    except Exception as err:
        print ("Exception suppressed: Couldn't retrieve agent id, \
            creating new one. " + str(err))

    if not agent_id:
        agent_id = account+"-"+device
        try:
            # Associate the agent id with the entity.
            cm.set_agent_id(entity, {"agent_id": agent_id})
        except Exception as err:
            write_rba("Status", "Couldn't create new agent id." + str(err))
            raise

    return agent_id


def dlfile():
    gitUrl = ("https://github.com/rcbops/openstack-probes/"
              "raw/master/maas/openstack-deploy")
    f = urllib2.urlopen(gitUrl)
    with open(
            "/usr/lib/rackspace-monitoring-agent/plugins/openstack-deploy",
            "wb") as local_file:
        local_file.write(f.read())


def get_agent_token(cm, agent_id):
    try:
        # Get agent token if it exists.
        agent_token = cm.get_my_token(agent_id)
    except Exception as err:
        agent_token = None
        print ("Exception suppressed: Couldn't retrieve agent token,\
                creating new one. " + str(err))

    if not agent_token:
        try:
            # Create the agent token.
            agent_token = cm.create_token({"label": agent_id})
        except Exception as err:
            write_rba("Status",
                      "Request Failed: Couldn't create agent id." + str(err))
            raise

    return agent_token


def create_plugin_check():
    check_type = "agent.plugin"
    if check_type not in checks:
        try:
            plugin_check_id = cm.create_check(args.entity, {
                "label": "OpenStack",
                "type": check_type,
                "timeout": args.timeout,
                "period": args.period,
                "details": {"file": "openstack-monitoring"}
            })
            installDir = '/usr/lib/rackspace-monitoring-agent/plugins'
            if not os.path.isdir(installDir):
                os.makedirs(installDir)
            dlfile()
            param = "/usr/lib/rackspace-monitoring-agent/plugins/"
            param += "openstack-deploy"
            workingDir = "/usr/lib/rackspace-monitoring-agent/plugins"
            p = subprocess.Popen(["/bin/bash", param], cwd=workingDir)
            p.wait()

            print ("OpenStack plugin check created")
        except Exception as err:
            write_rba(
                "Status",
                "Request Failed: Couldn't create OpenStack check " + str(err))
            raise
    else:
        print ("OpenStack plugin check already exists")
    return plugin_check_id


def create_filesystem_check(fs):
    check_type = "agent.filesystem"
    if check_type not in checks:
        target = fs
        try:
            fs_check_id = cm.create_check(args.entity, {
                "label": "Filesystem",
                "type": check_type,
                "timeout": args.timeout,
                "period": args.period,
                "details": {
                    "target": target
                }
            })
            print ("Filesystem check created")

        except Exception as err:
            write_rba(
                "Status",
                "Request Failed: Couldn't create filesystem check." + str(err))
            raise
    else:
        print ("Filesystem check already exists")
    return fs_check_id


def create_la_check():
    check_type = "agent.load_average"
    if check_type not in checks:
        try:
            la_check_id = cm.create_check(args.entity, {
                "label": "Load Average",
                "type": check_type,
                "timeout": args.timeout,
                "period": args.period
            })
            print ("Load average check created")

        except Exception as err:
            write_rba(
                "Status",
                "Request Failed: Couldn't create load check." + str(err))
            raise
    else:
        print ("Load check already exists")
    return la_check_id


def create_cpu_check():
    check_type = "agent.cpu"
    if check_type not in checks:
        try:
            cpu_check_id = cm.create_check(args.entity, {
                "label": "CPU",
                "type": check_type,
                "timeout": args.timeout,
                "period": args.period
            })
            print ("CPU check created")
        except Exception as err:
            write_rba(
                "Status",
                "Request Failed: Couldn't create CPU check" + str(err))
            raise
    else:
        "CPU check already exists"
    return cpu_check_id


def create_memory_check():
    check_type = "agent.memory"
    if check_type not in checks:
        try:
            mem_check_id = cm.create_check(args.entity, {
                "label": "Memory",
                "type": check_type,
                "timeout": args.timeout,
                "period": args.period
            })
            print ("Memory check created")
        except Exception as err:
            write_rba(
                "Status",
                "Request Failed: Couldn't create memory check." + str(err))
            raise
    else:
        print ("Memory check already exists")
    return mem_check_id


class CloudMonitoring:

    def __init__(self, account_number, token):
        self.token = token
        self.base_url = "https://monitoring.api.rackspacecloud.com"
        self.base_url += "/v1.0/hybrid:"
        self.base_url += account_number

    def __request(self, path, data=None):
        return request(self.base_url + path, self.token, data)

    def __putrequest(self, path, data=None):
        return put_request(self.base_url + path, self.token, data)

    def __paginated_request(self, path):
        items = []
        next_href = self.base_url + path
        while next_href:
            result = request(next_href, self.token)
            items += result["values"]
            next_href = result["metadata"]["next_href"]
        return items

    def set_agent_id(self, entity_id, data):
        return self.__putrequest("/entities/%s" % entity_id, data)

    def get_agent_tokens(self):
        return self.__request("/agent_tokens")

    def create_token(self, data):
        return self.__request("/agent_tokens", data)

    def get_my_token(self, agent_id):
        my_key = ''
        d = self.get_agent_tokens()['values']
        for v in d:
            if v['label'] == agent_id:
                my_key = v['id']
        return my_key

    def create_check(self, entity_id, data):
        return self.__request("/entities/%s/checks" % entity_id, data)

    def create_alarm(self, entity_id, data):
        return self.__request("/entities/%s/checks" % entity_id, data)

    def get_alarm_template(self, template_name):
        return self.__request("/alarm_examples/%s" % template_name)

    def get_checks(self, entity_id):
        return self.__request("/entities/%s/checks" % entity_id)

    def get_check_by_type(self, check_type, entity_id):
        for check in self.get_checks(entity_id)['values']:
            if check['type'] == check_type:
                return check

    def get_configured_check_types(self, entity_id):
        checks = []
        for check in self.get_checks(entity_id)['values']:
            if check['type'] not in checks:
                checks.append(check['type'])
        return checks

    def get_entity_details(self, entity_id):
        return self.__request("/entities/%s" % entity_id)

    def get_entities(self):
        return self.__request("/entities")

    def get_agent_id(self, entity_id):
        my_id = self.get_entity_details(entity_id)['agent_id']
        return my_id


if __name__ == "__main__":

    args = main()

    test_check = None

    # Verify parameters are input.
    if not args.account or not args.device or not args.token:
        write_rba("Status", "Failed: Missing input parameters. Try --help")
        sys.exit(1)

    # Verify all parameters have a value.
    for x in (args.account, args.device, args.entity, args.token):
        if x[0] == '-':
            write_rba("Status", "Failed: Missing input parameters. Try --help")
            sys.exit(1)

    try:
        cm = CloudMonitoring(args.account, args.token)
    except Exception as err:
        write_rba("Status", "Request Failed: "+str(err))
        raise

    try:
        checks = cm.get_configured_check_types(args.entity)
    except Exception as err:
        write_rba("Status",
                  "Request Failed: Couldn't view existing checks." + str(err))
        raise

    create_plugin_check()
    mounts = open("/proc/mounts", "rb")
    for mount in mounts:
        line = mount.split(" ")
        if line[2] == "xfs":
            create_filesystem_check(line[1])
    create_la_check()
    create_cpu_check()
    create_memory_check()

    agent_id = link_agent_to_entity(cm, args.entity, args.account, args.device)
    agent_token = get_agent_token(cm, agent_id)
    # Test check will be used in other process to verify functionality.
    if not test_check:
        try:
            test_check = cm.get_check_by_type(
                "agent.memory",
                args.entity)['id']
        except Exception as err:
            write_rba(
                "Status",
                "Request Failed: Couldn't retrieve memory check." + str(err))
            raise

    fileInfo = "monitoring_token " + agent_token + "\n"
    fileInfo += "monitoring_id " + agent_id + "\n"
    with open("/etc/rackspace-monitoring-agent.cfg", "wb") as local_file1:
        local_file1.write(fileInfo)
    local_file1.close()
    write_rba("TestCheck", test_check)
    write_rba("Status", "Success")
